//
//  SFFoundation-Prefix.pch
//  SFFoundation
//
//  Created by vvveiii on 2019/6/26.
//  Copyright Â© 2019 lvv. All rights reserved.
//

#ifndef SFFoundation_Prefix_pch
#define SFFoundation_Prefix_pch

#import <TargetConditionals.h>

#ifndef __MAC_10_15
#   define __MAC_10_15         101500
#endif

#ifndef __IPHONE_13_0
#   define __IPHONE_13_0    130000
#endif

#if TARGET_OS_OSX
#   define SF_MACOS  1

#   ifndef NSFoundationVersionNumber10_12_Max
#       define NSFoundationVersionNumber10_12_Max 1399
#   endif

#   ifndef NSFoundationVersionNumber10_13_Max
#       define NSFoundationVersionNumber10_13_Max 1499
#   endif

#   ifndef NSFoundationVersionNumber10_14_Max
#       define NSFoundationVersionNumber10_14_Max 1599
#   endif

#   ifndef NSFoundationVersionNumber10_15_Max
#       define NSFoundationVersionNumber10_15_Max 1699
#   endif
#endif

#if TARGET_OS_IOS
#   define SF_IOS  1

#   ifndef NSFoundationVersionNumber_iOS_10_x_Max
#       define NSFoundationVersionNumber_iOS_10_x_Max 1399
#   endif

#   ifndef NSFoundationVersionNumber_iOS_11_x_Max
#       define NSFoundationVersionNumber_iOS_11_x_Max 1499
#   endif

#   ifndef NSFoundationVersionNumber_iOS_12_x_Max
#       define NSFoundationVersionNumber_iOS_12_x_Max 1599
#   endif

#   ifndef NSFoundationVersionNumber_iOS_13_x_Max
#       define NSFoundationVersionNumber_iOS_13_x_Max 1699
#   endif
#endif

#import <Foundation/Foundation.h>
#import <Foundation/NSException.h>
#import <CoreGraphics/CoreGraphics.h>
#import <QuartzCore/QuartzCore.h>

#import "SFPlatformDefine.h"
#import "SFBitOPS.h"

#if SF_IOS
#import <UIKit/UIKit.h>
#define kScreenScaleFactor UIScreen.mainScreen.scale
#endif

#if SF_MACOS
#import <AppKit/AppKit.h>
#define kScreenScaleFactor NSScreen.mainScreen.backingScaleFactor
#endif

#import <objc/runtime.h>

@interface SFFoundation : NSObject

@property(class, nonatomic, assign) BOOL enableBlockAssertions; // default is NO

@end

#if !defined(NS_BLOCK_ASSERTIONS)
#   define SFAssert(condition, desc, ...)  do { if (SFFoundation.enableBlockAssertions) {NSAssert((condition), (desc), ##__VA_ARGS__);}} while(0)
#   define SFAssert1(condition, desc, arg1) SFAssert((condition), (desc), (arg1))
#   define SFAssert2(condition, desc, arg1, arg2) SFAssert((condition), (desc), (arg1), (arg2))
#   define SFAssert3(condition, desc, arg1, arg2, arg3) SFAssert((condition), (desc), (arg1), (arg2), (arg3))
#   define SFAssert4(condition, desc, arg1, arg2, arg3, arg4) SFAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4))
#   define SFAssert5(condition, desc, arg1, arg2, arg3, arg4, arg5) SFAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4), (arg5))
#   define SFParameterAssert(condition) SFAssert((condition), @"Invalid parameter not satisfying: %@", @#condition)
#else
#   define SFAssert(condition, desc, ...)   NSAssert((condition), (desc), ##__VA_ARGS__)
#   define SFAssert1(condition, desc, arg1) SFAssert((condition), (desc), (arg1))
#   define SFAssert2(condition, desc, arg1, arg2) SFAssert((condition), (desc), (arg1), (arg2))
#   define SFAssert3(condition, desc, arg1, arg2, arg3) SFAssert((condition), (desc), (arg1), (arg2), (arg3))
#   define SFAssert4(condition, desc, arg1, arg2, arg3, arg4) SFAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4))
#   define SFAssert5(condition, desc, arg1, arg2, arg3, arg4, arg5) SFAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4), (arg5))
#   define SFParameterAssert(condition) SFAssert((condition), @"Invalid parameter not satisfying: %@", @#condition)
#endif

#endif /* SFFoundation_Prefix_pch */
